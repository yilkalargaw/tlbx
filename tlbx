#!/bin/sh

set -eu

prg=${0##*/}
label="com.gitlab.uppercat.tlbx"
ll="--log-level=error"
img="docker.io/library/alpine:latest"

err()  { printf '%s: %s\n' "$prg" "$1" >&2; shift; "$@"; }

usage() {
	echo "usage:
	$prg create [-i IMGNAME] [-c CONTAINERNAME] [-h HOSTNAME] [-n]
	$prg enter [PODMAN_EXEC_OPTS...] CONTAINERNAME CMD [ARGS...]
	$prg list
	$prg rm [-f] CONTAINERNAME [CONTAINERNAME...]

global options:
	$prg [-l debug|info|warn|error|fatal|panic] (default: error)"
	exit 1
}

while getopts :l: opt; do
	case $opt in
		l) case $OPTARG in
			debug|info|warn|error|fatal|panic) ll="--log-level=$OPTARG" ;;
			*) err "$prg: unknown loglevel '$OPTARG'" usage ;;
		esac ;;
		*) err "$prg: unknown option -$OPTARG" usage ;;
	esac
done
shift $((OPTIND - 1)); unset OPTIND

user=$(id -run)
uid=$(id -ru)
XDG_RUNTIME_DIR="${XDG_RUNTIME_DIR:-/run/user/$uid}"

case ${1:-} in
	create)
		shift

		name='' hostname='' bindhome=1
		while getopts :i:c:h:n opt; do
			case $opt in
				i) img="$OPTARG" ;;
				c) name="$OPTARG" ;;
				h) hostname="$OPTARG" ;;
				n) bindhome= ;;
				*) err "unknown create option -$OPTARG" usage ;;
			esac
		done
		shift $((OPTIND - 1))
		[ $# -le 0 ] || usage

		if [ -z "${name:-}" ]; then
			name="${img##*/}"
			name="${name%%:*}-$prg"
		fi

		# shellcheck disable=SC2046
		podman "$ll" create \
			--label "$label=true" \
			--dns none \
			--hostname "${hostname:-$prg}" \
			--ipc host \
			--name "$name" \
			--network host \
			--no-hosts \
			--pid host \
			--privileged \
			--security-opt label=disable \
			--ulimit host \
			--userns=keep-id \
			--user root:root \
			--tz=local \
			--volume "$XDG_RUNTIME_DIR:$XDG_RUNTIME_DIR" \
			$([ -n "$bindhome" ] && echo "--volume $HOME:/home/$user:rslave") \
			--volume /run/dbus/system_bus_socket:/run/dbus/system_bus_socket \
			--volume /etc:/run/host/etc \
			--volume /run:/run/host/run:rslave \
			--volume /tmp:/run/host/tmp:rslave \
			--volume /var:/run/host/var:rslave \
			--volume /dev:/dev:rslave \
			--volume /mnt:/mnt:rslave \
			--volume /media:/media:rslave \
			--volume /srv:/srv:rslave \
			$([ -d /run/media ] && echo "--volume /run/media:/run/media:rslave") \
			"$img" /bin/sh "$XDG_RUNTIME_DIR/$prg-init" \
				"$uid" "$user" "$bindhome" >/dev/null

		echo "Created container '$name' from image $img"
		echo "Enter with: $prg enter [PODMAN_EXEC_OPTS...] $name CMD [ARGS...]"

		;;

	enter)
		shift

		name=
		for arg; do
			case $arg in
				-*) ;;
				*) name="$arg"; break ;;
			esac
		done
		if [ -z "${name:-}" ]; then
			err "container name required." exit 1
		fi

		read -r id status <<- @
		$(podman "$ll" inspect -f label="$label=true" \
				--format "{{.Id}}	{{.State.Status}}" "$name")
		@

		( # Ensure crun state is clean so that the container can be restarted.
		crundir="$XDG_RUNTIME_DIR/crun/$id"
		if [ "$status" = exited ] && [ -d "$crundir" ]; then
			rm -rf "$crundir"
		fi
		)

		case $status in
			running) ;;
			*) cat > "$XDG_RUNTIME_DIR/$prg-init" << 'INIT'
#!/bin/sh
# This is run from the container and should be executed with podman start.

uid="${1:?}" user="${2:?}" bindhome="${3:-}"

cat | while read -r src dst opt; do
	if [ -d "$src" ]; then
		mkdir -p "$dst"
	else
		! [ -f "$src" ] && continue
	fi

	mount --bind -v -o "$opt" "$src" "$dst"
done <<- @
/usr/share/empty /sys/fs/selinux rw
/run/host/run/libvirt /run/libvirt rw
/run/host/var/lib/flatpak /var/lib/flatpak ro
@

ln -sfv /run/host/etc/hosts /etc/hosts
ln -sfv /run/host/etc/resolv.conf /etc/resolv.conf

if command -v useradd >/dev/null; then
	useradd -d /home/$user -u "$uid" "$user"
else
	adduser -D -h /home/$user -u "$uid" "$user"
fi || {
	install -d -o "$user" -g "$user" -m 700 "/home/$user"
	su "$user" sh -c "cp -p /etc/skel/.* /home/$user"
	sed -i "/^$user:/ s,:[^:]*:\([^:]*\)$,:/home/$user:\1," /etc/passwd
}

passwd -d root

# This is out of reach in root's home in the container.
mkdir -p ~/.cache
pipe=~/.cache/"$prg-initialized-$$"
mkfifo -m 400 "$pipe"

# block forever
exec cat "$pipe"
INIT
			podman "$ll" start "$name" >/dev/null ;;
		esac

		for arg; do
			case $arg in -*) ;;
				*) name="$arg"; break ;;
			esac
		done
		if [ -z "$name" ]; then
			err "enter requires a tlbx name"
		fi

		if [ $# -le 1 ]; then
			rootfs="$(podman inspect "$name" \
				--format='{{.GraphDriver.Data.UpperDir}}')" ||
				err "Could not inspect .GraphDriver.Data.UpperDir of tlbx $name."
			if [ -d "$rootfs" ]; then
				shell="$(awk -F : -v user="$user" \
					'$1 == user {print $7}' "$rootfs/etc/passwd")" ||
				err "Could not find $user in /etc/passwd of tlbx $name."
			fi
			fallback=/bin/sh
			[ -n "${shell:-}" ] || err "Falling back to $fallback"
			set -- -it "$name" "${shell:-$fallback}" -l
		fi

		# shellcheck disable=SC2046
		exec podman "$ll" exec $(env | sed -r '
			/^(HOST|HOSTNAME|HOME|PATH|SHELL|USER|_)=/ d
			/^[_A-Za-z][_A-Za-z0-9]*=/! d
			\|^[^=]+='"$HOME"'|! s/=.*//
			\|^[^=]+='"$HOME"'| s|=/var|=|
			s/^/-e /
		') -u "$user" -w "/home/$user" "$@"
		;;

	list)
		shift

		[ $# -le 0 ] || err "warning: list does not take arguments."

		exec podman "$ll" ps -af label="$label=true" \
			--format "{{.ID}}	{{.Names}}	{{.Created}}	{{.Image}}	{{.Status}}"
		;;

	rm)
		shift

		force=
		while getopts :f opt; do
			case $opt in
				f) force=1 ;;
				*) err "unknown rm option -$OPTARG" usage ;;
			esac
		done
		shift $((OPTIND - 1))

		[ $# -gt 0 ] || usage

		for name do
			case $name in
				-*) err \
					"container name cannot start with '-'; pass flags before subcommand"
					continue ;;
				*) ;;
			esac
			read -r running haslabel <<- @
			$(podman inspect --format \
			"{{.State.Running}} {{index .Config.Labels \"$label\"}}" "$name")
			@
			if [ -z "$running" ]; then
				err "no container by name '$name' is known."; continue
			fi
			if ! [ "$haslabel" = true ]; then
				err "'$name' exists but is not a tlbx container."
				continue
			fi
			case $running in
				true)
					if [ -z "$force" ]; then
						err "container '$name' is running. Pass -f to force."
					else
						podman "$ll" stop "$name" >/dev/null
						podman rm -f "$ll" "$name"
					fi
					;;
				*)
					podman rm "$ll" "$name"
					;;
			esac
		done
		exit
		;;

	'')
		err "subcommand expected" usage
		;;

	*)
		err "unknown subcommand '$1'" usage
		;;
esac

# vim: set ft=sh tw=78 ai noet ts=2 sw=2:
