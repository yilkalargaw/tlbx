#!/bin/sh

set -eu

prg=${0##*/}
label="com.gitlab.uppercat.tlbx=true"
ll="--log-level=error"

usage() {
	echo "usage:
	$prg create [-i IMGNAME] [-c CONTAINERNAME]
	$prg enter [PODMAN_EXEC_OPTS...] CONTAINERNAME CMD [ARGS...]
	$prg list
	$prg destroy [-f] CONTAINERNAME [CONTAINERNAME...]

global options:
	$prg [-l debug|info|warn|error|fatal|panic] (default: error)"
	exit 1
}

assertcontainer() (
	set +e
	[ -e /run/.containerenv ]
	if [ $? -eq "${2:?}" ]; then
		case $2 in
			0) echo "warning: $prg $1 should not be run in a container." ;;
			*) echo "warning: $prg $1 should be run in a container." ;;
		esac >&2
	fi
)

while getopts :l: opt; do
	case $opt in
		l) case $OPTARG in
			debug|info|warn|error|fatal|panic) ll="--log-level=$OPTARG" ;;
			*) echo "$prg: unknown loglevel '$OPTARG'" >&2; usage ;;
		esac ;;
		*) echo "$prg: unknown option -$OPTARG" >&2; usage ;;
	esac
done
shift $((OPTIND - 1)); unset OPTIND

user=$(id -run)
uid=$(id -ru)
XDG_RUNTIME_DIR="${XDG_RUNTIME_DIR:-/run/user/$uid}"

case ${1:-} in
	create)
		assertcontainer "$1" 0; shift

		img=docker.io/library/alpine:latest name=

		while getopts :i:c: opt; do
			case $opt in
				i) img="$OPTARG" ;;
				c) name="$OPTARG" ;;
				*) echo "$prg: unknown option -$OPTARG" >&2; usage ;;
			esac
		done
		shift $((OPTIND - 1))
		[ $# -le 0 ] || usage

		if [ -z "${name:-}" ]; then
			name="${img##*/}"
			name="${name%%:*}-$prg"
		fi

		mkdir -p "$XDG_RUNTIME_DIR/$prg"
		cat > "$XDG_RUNTIME_DIR/$prg/$name-init" << 'INIT'
#!/bin/sh
# This is run from the container and should be executed with podman start.

uid="${1:?}" user="${2:?}" name="${3:?}"

cat | while read -r src dst opt; do
	if [ -d "$src" ]; then
		mkdir -p "$dst"
	else
		! [ -f "$src" ] && continue
	fi

	mount --bind -v -o "$opt" "$src" "$dst"
done <<- @
/usr/share/empty /sys/fs/selinux rw
/run/host/run/libvirt /run/libvirt rw
/run/host/var/lib/flatpak /var/lib/flatpak ro
@

ln -sfv /run/host/etc/hosts /etc/hosts
ln -sfv /run/host/etc/resolv.conf /etc/resolv.conf

getent passwd "$user" 2>/dev/null || {
	if command -v useradd >/dev/null; then
		useradd -M -d "/home/$user" -u "$uid" "$user"
	else
		adduser -D -H -h "/home/$user" -u "$uid" "$user"
	fi
}

passwd -d root

# This is out of reach in root's home in the container.
mkdir -p ~/.cache
pipe=~/.cache/"$prg-initialized-$$"
mkfifo -m 400 "$pipe"

# block forever
exec cat "$pipe"
INIT

		# shellcheck disable=SC2046
		podman "$ll" create \
			--label "$label" \
			--dns none \
			--hostname "$prg" \
			--ipc host \
			--name "$name" \
			--network host \
			--no-hosts \
			--pid host \
			--privileged \
			--security-opt label=disable \
			--ulimit host \
			--userns=keep-id \
			--user root:root \
			--volume "$XDG_RUNTIME_DIR:$XDG_RUNTIME_DIR" \
			--volume "$HOME:/home/$user":rslave \
			--volume /run/dbus/system_bus_socket:/run/dbus/system_bus_socket \
			--volume /etc:/run/host/etc \
			--volume /run:/run/host/run:rslave \
			--volume /tmp:/run/host/tmp:rslave \
			--volume /var:/run/host/var:rslave \
			--volume /dev:/dev:rslave \
			--volume /mnt:/mnt:rslave \
			--volume /media:/media:rslave \
			$([ -d /run/media ] && echo "--volume /run/media:/run/media:rslave") \
			"$img" /bin/sh "$XDG_RUNTIME_DIR/$prg/$name-init" \
				"$uid" "$user" "$name" >/dev/null

		echo "Created container '$name' from image $img"
		echo "Enter with: $prg enter [PODMAN_EXEC_OPTS...] $name CMD [ARGS...]"

		;;

	enter)
		assertcontainer "$1" 0; shift

		name=
		for arg; do
			case $arg in
				-*) ;;
				*) name="$arg"; break ;;
			esac
		done
		if [ -z "${name:-}" ]; then
			echo "Container name required." >&2
			exit 1
		fi

		read -r id status <<- @
		$(podman "$ll" inspect -f label="$label" \
				--format "{{.Id}}  {{.State.Status}}" "$name")
		@

		( # Ensure crun state is clean so that the container can be restarted.
		crundir="$XDG_RUNTIME_DIR/crun/$id"
		if [ "$status" = exited ] && [ -d "$crundir" ]; then
			rm -rf "$crundir"
		fi
		)

		case $status in
			running) ;;
			*) podman "$ll" start "$name" >/dev/null ;;
		esac

		# shellcheck disable=SC2046
		exec podman "$ll" exec $(env | sed -r '
			/^(HOST|HOSTNAME|HOME|PATH|SHELL|USER|_)=/ d
			s/=.*//; s/^/-e /
		') -u "$user" -w "$PWD" "$@"
		;;

	list)
		assertcontainer "$1" 0; shift

		[ $# -le 0 ] || echo "warning: $prg list does not take arguments." >&2

		exec podman "$ll" ps -af label="$label" \
			--format "{{.ID}}  {{.Names}}  {{.Created}}  {{.Image}}  {{.Status}}"
		;;

	destroy)
		assertcontainer "$1" 0; shift

		force=
		while getopts :f opt; do
			case $opt in
				f) force=1 ;;
				*) echo "$prg: unknown option -$OPTARG" >&2; usage ;;
			esac
		done
		shift $((OPTIND - 1))

		[ $# -gt 0 ] || usage

		for name do
			case $(podman "$ll" ps -a -f label="$label" -f name="^$name$" \
				--format "{{.State}}") in
				running)
					if [ -z "$force" ]; then
						echo "Container '$name' is running. Pass -f to force." >&2
					else
						podman "$ll" stop "$name" >/dev/null && podman rm "$ll" "$name"
					fi
					;;
				'')
					echo "No $prg container by name '$name' is known." >&2
					;;
				*)
					podman rm "$ll" "$name"
					;;
			esac
		done
		exit
		;;

	'')
		echo "$prg: subcommand expected" >&2
		usage
		;;

	*)
		echo "$prg: unknown subcommand $1" >&2
		usage
		;;
esac

# vim: set ft=sh tw=78 ai noet ts=2 sw=2:
